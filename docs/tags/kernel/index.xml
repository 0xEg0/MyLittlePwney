<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Kernel - Tag - MyLittlePwney</title>
    <link>https://0xeg0.github.io/MyLittlePwney/tags/kernel/</link>
    <description>Kernel - Tag | MyLittlePwney</description>
    <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 21 Feb 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://0xeg0.github.io/MyLittlePwney/tags/kernel/" rel="self" type="application/rss+xml" /><item>
  <title>Buffer Overflow Basic</title>
  <link>https://0xeg0.github.io/MyLittlePwney/pwn/kernel/attacks/buffer-overflow-basic/</link>
  <pubDate>Wed, 21 Feb 2024 00:00:00 &#43;0000</pubDate>
  <author>Author</author>
  <guid>https://0xeg0.github.io/MyLittlePwney/pwn/kernel/attacks/buffer-overflow-basic/</guid>
  <description><![CDATA[OverviewTout comme pour une exploitation de BoF en user-land, notre objectif va Ãªtre d&rsquo;overwrite la return address de la fonction vulnÃ©rable pour prendre le contrÃ´le du flow d&rsquo;exÃ©cution. On se place ici dans le cas oÃ¹ aucune protection n&rsquo;est prÃ©sente au niveau du kernel.
DetailNotre objectif lors de l&rsquo;exploitation d&rsquo;un buffer overflow en kernel-land est de rÃ©ussir a exÃ©cuter du code user-land tout en profitant de l&rsquo;exÃ©cution de code kernel-land pour Ã©lever nos privilÃ¨ges.]]></description>
</item>
<item>
  <title>ðŸªœ Kernel Privesc ðŸªœ</title>
  <link>https://0xeg0.github.io/MyLittlePwney/pwn/kernel/kernel-privesc/</link>
  <pubDate>Mon, 19 Feb 2024 00:00:00 &#43;0000</pubDate>
  <author>Author</author>
  <guid>https://0xeg0.github.io/MyLittlePwney/pwn/kernel/kernel-privesc/</guid>
  <description><![CDATA[OverviewL&rsquo;objectif de ce post est d&rsquo;aborder la couche d&rsquo;abstraction nÃ©cÃ©ssaire Ã  la comprÃ©hension du pwn kernel. Pour cela, il est nÃ©cÃ©ssaire de comprendre comment les diffÃ©rents process interagissent avec le kernel, et comment un contrÃ´le de flow d&rsquo;execution en kernel-mode peut nous permettre d&rsquo;amÃ©liorer nos privilÃ¨ges en user-land.
Process x KernelIl est important de noter que l&rsquo;on interagit avec le kernel de pleins de maniÃ¨res diffÃ©rentes. Que ce soit en modifiant le filesystem, avec des syscalls, en communiquant avec des devices&hellip; Toutes ces actions nÃ©cÃ©ssitent une intervention du kernel au niveau des process qui les initient.]]></description>
</item>
</channel>
</rss>
